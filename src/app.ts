// Importamos express, que ser√° el framework para crear nuestro servidor HTTP
import express from "express";

// Importamos las variables de entorno procesadas desde config/envs
import { envs } from "./config/envs";
import { GitHubController } from "./presentation/github/controller";
import { GithubSha256Middleware } from "./presentation/middlewares/github.middleware";

// =========================
//! (IIFE) Funci√≥n an√≥nima auto-invocada
// =========================
// Una IIFE (Immediately Invoked Function Expression) es una funci√≥n que
// se define y se ejecuta inmediatamente.
// Nos sirve para inicializar nuestra aplicaci√≥n sin necesidad de llamar
// manualmente a "main()" m√°s abajo en el c√≥digo.
(() => {
  main();
})();

// =============================================
// üåê SERVIDOR WEBHOOK DE GITHUB
// üìÅ app.ts - Configuraci√≥n principal
// =============================================
/*
üìò PROP√ìSITO DEL SERVIDOR:
- Recibir webhooks de GitHub cuando ocurren eventos en repositorios
- Validar la autenticidad de los webhooks usando SHA-256 HMAC
- Procesar diferentes tipos de eventos (stars, issues, pull requests, etc.)
- Enviar notificaciones autom√°ticas a Discord
- Mantener seguridad mediante verificaci√≥n de firmas criptogr√°ficas

üîÑ FLUJO PRINCIPAL:
1. GitHub env√≠a webhook ‚Üí Middleware de validaci√≥n
2. Se verifica la firma SHA-256 del payload
3. Si es v√°lido ‚Üí Controller procesa el evento
4. Se genera mensaje personalizado seg√∫n el tipo de evento
5. Se env√≠a notificaci√≥n a Discord
6. Se responde a GitHub con confirmaci√≥n

üõ°Ô∏è SEGURIDAD IMPLEMENTADA:
- Validaci√≥n HMAC SHA-256 obligatoria
- Headers de GitHub verificados
- Secret token para autenticaci√≥n
- Manejo de errores seguros
*/

// =========================
// Funci√≥n principal de la aplicaci√≥n
// =========================
function main() {
  // Creamos una instancia de Express
  const app = express();

  const controller = new GitHubController();

  app.use(express.json());

  // =============================================
  // üõ°Ô∏è MIDDLEWARE DE SEGURIDAD SHA-256
  // =============================================
  app.use(GithubSha256Middleware.verifyGithubSignature);
  // üëâ Middleware que se ejecuta ANTES de cualquier ruta
  //    Valida que el webhook realmente venga de GitHub
  //    Usa criptograf√≠a SHA-256 para verificar autenticidad

  // Definimos una ruta POST que escuchar√° los webhooks de GitHub
  // =============================================
  // üéØ RUTA PRINCIPAL PARA WEBHOOKS
  // =============================================
  app.post("/api/github", controller.webHookHandler);
  // üëâ Endpoint POST que GitHub llamar√° autom√°ticamente
  //    Debe coincidir exactamente con la URL configurada en GitHub
  //    Procesar√° todos los tipos de eventos configurados

  // Levantamos el servidor en el puerto definido en las variables de entorno
  app.listen(envs.PORT, () => {
    console.log(`App Running on PORT ${envs.PORT}`);
  });
}

/* 
*üìå Explicaci√≥n: Funci√≥n an√≥nima auto-invocada (IIFE)
Una IIFE es un patr√≥n en JavaScript/TypeScript que nos permite ejecutar una 
funci√≥n inmediatamente despu√©s de definirla.
Ejemplo b√°sico: 
*/

/* (() => {
  console.log("Soy una IIFE üöÄ");
})(); */

/* 
Funci√≥n an√≥nima: porque no tiene nombre.
Auto-invocada: porque se ejecuta al momento de definirse.
Se usa mucho en entornos backend para encapsular c√≥digo y evitar variables globales.
En tu caso, encapsula la llamada a main(), manteniendo el flujo de inicializaci√≥n
 limpio y organizado.

 Una funci√≥n an√≥nima autoinvocada, tambi√©n conocida 
 como IIFE (Expresi√≥n de funci√≥n ejecutada inmediatamente), 
 es un patr√≥n de dise√±o en JavaScript que consiste en una 
 funci√≥n an√≥nima que se ejecuta tan pronto como se define.
 Este patr√≥n se compone de dos partes principales: la primera 
 es la funci√≥n an√≥nima encerrada entre par√©ntesis, lo que la 
 convierte en una expresi√≥n de funci√≥n, y la segunda es el
  par√©ntesis adicional que sigue inmediatamente, que ejecuta dicha funci√≥n.
 La sintaxis b√°sica es (function() { /* c√≥digo *
  */
